To visualize and play with an online interactive analog clock:

https://toytheater.com/clock/

------------------------------------------------------------------
To compile under linux

gcc -o clock-hands-1 src/clock-hands-1.c
gcc -o clock-hands-2 src/clock-hands-2.c -lm

clock-hands-1.c
no input
lists all angles around the clock (hh:mm +/- dd.99), decimal degrees
has granularity "minute"

clock-hands-2.c
theta as input
enumerates the hits for every hour {0..11}
has granularity miiliseconds
------------------------------------------------------------------
To run

./clock-hands-1

./clock-hands-2 0

------------------------------------------------------------------

Working the algebra directly from wiki:
https://en.wikipedia.org/wiki/Clock_angle_problem

Let delta_theta be the angle in degrees between the hour hand and the minute hand

Some observations (already very well explained in the Wiki article):

On an analog clock

minute hand moves (360 degrees / 60) in 1 minute = 6 degrees
6 degrees * M
=
6 M
(1)

hour hand makes full turn in 12 hours
units -t "12 hours" minutes
720
A full turn is also 360 degrees
Thus in 1 minute, the hour hand moves:
#
# nested units statement:
#
units -t " 360 / `units -t "12 hours" minutes`"
linux> units -t " 360 degrees / `units -t "12 hours" minutes`" deg
0.5

How many total minutes since both hands left the 00:00 position (conjunction)?
In minutes:
M_sigma = (60H) + M
example for 08:55
units -t "8 hours + 55 minutes " minutes
linux> units -t "8 hours + 55 minutes " minutes
535

In general, hour hand thus moves
= 0.5 degrees * M_sigma
= 1/2 (H 60 + M)
degrees
(2)

The angle between the the minute hand and the hour hand:

delta_theta = (1) - (2)
= 6 M - 1/2 (60 H + M) 
(3)

Worth noting:

If the clock has a hand for seconds.
This moves at speed:
(360 degrees / 60 seconds)
6 degrees / second
60 times faster than the minute hand

For known delta_theta and H, rearrange (3) to bring M to the LHS:

delta_theta = 6 M - 1/2 (60 H + M) 
2 delta_theta = 12M - (60 H + M)
2 delta_theta = 11M - 60 H
11M = 2 delta_theta + 60H
M = ( 2 delta_theta + 60 H ) / 11
(4)

------------------------------------------------------------------

Practical examples:

H=8
M=55
units -t " ($M * 6) - 0.5 (60 $H + $M)" | xargs printf "# %-4.6f\n"
# 62.500000

H=8
M=56
units -t " ($M * 6) - 0.5 (60 $H + $M)" | xargs printf "%-4.6f\n"
# 68.000000

Thus
at 
08:55
delta angle is 62.50 degrees
One minute later at
08:56
delta angle is 68.00 degrees

So the idea dawns whether Cabal psychopaths might ever want to hit 66 directly. A favourite of theirs as online truthers have repeatedly uncovered.


Step up the granularity to seconds and milliseconds
in other words to decimal minutes

----------------------------------------------------------------------------------------------------------------------------------------------------
# Select a given delta_theta (-180..180) and solve for M fixing H using (4)
#
linux>
H=8
delta_theta=66
units -o "%3.10f" -t " (2 $delta_theta + 60 $H) / 11 " | xargs printf "# %-4.10f\n"
decimal_minutes=`units -o "%3.8f" -t " (2 $delta_theta + 60 $H) / 11 "`
units -t "$decimal_minutes minutes" "minute;second"
# 55.6363636364
55;38.181818

*************************************************************************************
Thus at 
8 hours 55 minutes 38.182 seconds
the angle between the hour hand and the minute hand of an analog watch is 66 degrees
*************************************************************************************

In proper 24 hour military notation:
8 hours 55 minutes 38.18 seconds
=
08:55:38.18

as in 
linux> date -d "11 Sep 2001 08:55:38.18" +"%e %b %Y %H:%M:%S.%N %a DoY %j Week %V"
11 Sep 2001 08:55:38.180000000 Di DoY 254 Week 37

%N is nanoseconds

Note in passing (irrelevant to clock hand angle problem)
linux> bc <<< " 365 - 254"
111

linux> man date
       Convert seconds since the Epoch (1970-01-01 UTC) to a date

              $ date --date='@2147483647'

linux>
date -d "11 Sep 2001 08:55:38.18" +"%s"
1000191338
#
# check:
#
linux>
date -d "@1000191338"
Di 11 Sep 2001 08:55:38 CEST

-------------

Check in reverse using the decimal notation again (just to be thorough)

H=8
M=55.636364
units -o "%3.8f" -t " ($M * 6) - 0.5 (60 $H + $M)" | xargs printf "# %-4.8f\n"
# 66.00000200

confirmed

-------------

units -t "8 hours + 55 minutes + 38.18184 seconds" 
32138.182 s

Just a hunch:
bc <<< "3 * 32138.182"
linux> bc <<< "3 * 32138.182"
96414.546

Stretching it a bit too much
but was worth a try

--------------------------------

clock-list-all-hour-decimal-minute-pairs-4-given-delta-theta.c

First steps:

linux> ./clock2 180
01:38.181818
02:43.636364
03:49.090909
04:54.545455
05:60.000000
06:65.454545
07:70.909091
08:76.363636
09:81.818182
10:87.272727
11:92.727273
12:98.181818
WRONG
minutes > 60
gotta hack around in the code
	
-----------------

linux> units -o "%3.8f" -t "55 minutes + 30 seconds" minutes

M=55.636364
units -t " ($M * 6) - 0.5 (60 $H + $M)" | xargs printf "# %-4.6f\n"

-----------------------

Documenting what I posted to twitter
https://x.com/FourNinesFineK9/status/1835122593839390766

At 8.55 AM (or PM), the angle between the minute hand and the hour hand on an analog clock is
62.50 degrees.
If we improve the granularity to seconds, the angle rounds to 66 degrees for a full 10 seconds: 

08:55:33
..
08:55:43

To hit 66.00 degrees directly, go further down to milliseconds:
08:55:33.18
   55;38.1818
[WRONG] corrected to 38 later

[linux bash/ GNU units code under ALT tab]

H=8
for S in {30..59}
do
	M=`units -o "%3.8f" -t "55 minutes + $S seconds" minutes`
	printf "08:55:%0d " $S 
	units -o "%3.8f" --t " ($M * 6) - 0.5 (60 $H + $M)" | xargs printf "%-4.8f\n"
done

H=8
M=55
units -t " ($M * 6) - 0.5 (60 $H + $M)" | xargs printf "# %-4.6f\n"
# 62.500000

Algebra from here:
https://en.wikipedia.org/wiki/Clock_angle_problem

-----------------------

Twitter POST
At 8.55 AM (or PM), the angle between the minute hand and the hour hand on an analog clockðŸ•˜is

62.50 degrees

Improve the granularity to seconds, the angle rounds to 66 degrees for a full 10 seconds: 

08:55:33-43

To hit 66.00 degrees directly,
08:55:33.18
       55;38.1818

Old style:
       
linux> echo "scale=10; ((2 * $delta_theta + 60 * $H) / 11) " | bc -l
55.6363636363

---------------------------

Look if 0.18 recurring extends to infinity (nope)

linux> H=8
delta_theta=66
units -o "%3.10f" -t " (2 $delta_theta + 60 $H) / 11 " | xargs printf "# %-4.10f\n"
decimal_minutes=`units -o "%3.8f" -t " (2 $delta_theta + 60 $H) / 11 "`
units -t "$decimal_minutes minutes" "minute;second"
# 55.6363636364
55;38.181818
linux> units  -o "%3.22f" -t "$decimal_minutes minutes" "minute;second"
55.0000000000000000000000;38.1818183999999973821105
linux> units -o "%3.22f" -t " (2 $delta_theta + 60 $H) / 11 " | xargs printf "# %-4.22f\n"
# 55.6363636363636331338967
linux> decimal_minutes=`units -o "%3.22f" -t " (2 $delta_theta + 60 $H) / 11 "`
linux> units -t "$decimal_minutes minutes" "minute;second"
55;38.181818
linux> units  -o "%3.22f" -t "$decimal_minutes minutes" "minute;second"
55.0000000000000000000000;38.1818181818180022446541
linux> decimal_minutes=`units -o "%3.30f" -t " (2 $delta_theta + 60 $H) / 11 "`
linux> units  -o "%3.22f" -t "$decimal_minutes minutes" "minute;second"
55.0000000000000000000000;38.1818181818180022446541

----------------
So 15 Sep 2024 10:51:16 CEST

H=8
delta_theta=30
units -o "%3.2f" -t " (2 $delta_theta + 60 $H) / 11 " 

decimal_minutes=`units -o "%3.2f" -t " (2 $delta_theta + 60 $H) / 11 "`

-----------------------

current project

gnome-text-editor notes/clock-hands-angle.notes &

linux> gnome-text-editor src/clock-hands-1.c 
linux> gnome-text-editor src/clock-hands-2.c 


   else if (angle_between_hands>180)
lists only the acute angle
never the obtuse one

In this way we do not worry about whether hour hand is ahead of minute hand or vice versa

linux> whereis gnome-text-editor
gnome-text-editor: /usr/bin/gnome-text-editor /usr/share/gnome-text-editor
linux> whereis xdg-open 
xdg-open: /usr/bin/xdg-open /usr/share/man/man1/xdg-open.1.gz

linux> lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 24.04.1 LTS
Release:	24.04
Codename:	noble

Go negative (hour hand in front of minute hand)
Add in "*" Ä‰os units unhappy otherwise

H=0
delta_theta=-66.6

decimal_minutes=`units -o "%3.9f" -t " (2 * $delta_theta + 60 * $H) / 11 "`
start=`units -t "$H hour + $decimal_minutes minute" second`
delta_time=`units -t "(1 day / 2) / 11" second`
for i in {0..10}; do units -t "$start second + $i * $delta_time second" "hour;minute;second;millisecond"; done 

CRASHES
oops

--------------
Twitter POST

An analog clock hits 66.6 degrees at
"08:55:44.727"
A clock hits any given angle (0..360) 11 times in a 12 hour interval.
(Angle > 0)
Minute hand ahead 
(Angle < 0)
Hour hand ahead
--------------

for i in 0 10 30 45 60 90 135 180; do echo -$i; done

for i in 0 10 30 45 60 90 135 180
do
	printf "%03d degrees\n" $i
	./clock-hands-2 $i
done	

for i in 0 10 30 45 60 90 135 180; do echo $i; done
for i in 0 10 30 45 60 90 135 180; do echo -$i; done
for i in 0 10 30 45 60 90 135 180; do 	printf "%03d degrees\n" $i; 	./clock-hands-2 $i; done
for i in 0 10 30 45 60 90 135 180; do 	printf "%03d degrees\n" $i; 	./clock-hands-2 $i; done >output/results-positive-angles.dat
for i in 0 10 30 45 60 90 135 180; do 	printf "%03d degrees\n" -$i; 	./clock-hands-2 -$i; done >output/results-negative-angles.dat

To check out
conjunction (0 degrees)
opposition (180)
orthogonal (90)
and their negatives

linux> ls -ng output/
total 20
-rw-rw-r-- 1 1000 8922 Sep 14 08:42 results
-rw-rw-r-- 1 1000 1242 Sep 17 02:42 results-negative-angles.dat
-rw-rw-r-- 1 1000 1240 Sep 17 02:42 results-positive-angles.dat

linux> ./clock-hands-1 > output/results-clock-hands-1.dat

----------------------------
H=0
delta_theta=90

decimal_minutes=`units -o "%3.9f" -t " (2 $delta_theta + 60 $H) / 11 "`
start=`units -t "$H hour + $decimal_minutes minute" second`
delta_time=`units -t "(1 day / 2) / 11" second`
for i in {0..10}; do units -t "$start second + $i $delta_time second" "hour;minute;second;millisecond"; done 
0;16;21;818.18
1;21;49;90.88
2;27;16;363.58
3;32;43;636.28
4;38;10;908.98
5;43;38;181.68
6;49;5;454.38
7;54;32;727.08
8;59;59;999.78
10;5;27;272.48
11;10;54;545.18


Totally daft but we have to do it
A hunch:
linux> units -t -o "%5.25f" "1 hour + 5 minute + (5/11) minute" hms
1.0000000000000000000000000;5.0000000000000000000000000;27.2727272727299983046123089
linux> units -t -o "%-50.22f" "(60/11 - 5 ) * 60"
27.2727272727272485042249  
More on the hunch:
27.272727272727
27.272727272727
2727272727272727272727
1122334455667788990011
2 + 7 = 9
Woohoo maths
https://x.com/FourNinesFineK9/status/1245808413214466051
Hunch
"9 11"
Work backwards:
27.2727272727272727272727
units -t -o "%5.25f" "8 hour + 55 minute + 27.2727272727272727272727 seconds" hms
linux> units -t -o "%2.40g" "8 hour + 55 minute + 27.2727272727272727272727 seconds" hms
 8;55;27.27272727269999919030851742718368768692
Stop
mad enough as is
Actually quite mad, I'm trying to do woohoo on the interval not the supposed time on Rockefeller's watch
08:55
guessing [they] may have been aiming for
08:55:44.727



Time interval between hits:

1 hour 5 minutes 27.27 seconds
=
One eleventh of a 12 hour cycle

Occurs 22 times per day


is the time interval between hits for a given theta angle

conceptually similar to

Fencepost problem
https://en.wikipedia.org/wiki/Off-by-one_error

12 posts
11 intervals

The other way round:

# Where the heck did I get the following?
# From observing the results after experimenting?
#
linux> units -t "(60/11) minutes" "minutes;seconds"
5;27.272727
linux> units -t "1 hour + (60/11) minutes" hms
1;5;27.272727
linux> units -t "1 hour + 5 minute + (5/11) minute" "hour;minute"
1;5.4545455
linux> units -t "1 hour + 5 minute + (5/11) minute" s
3927.2727
linux> units -t day
24 hr = 86400 s
linux> units -t "(1 day / 2) / 11"
3927.2727 s
linux> units -t "(1 day / 2) / 11" hms
1;5;27.272727

linux> qalc "60/11"
60 / 11 = 5 + 5/11 â‰ˆ 5.454545455
linux> qalc "(60/11 - 5 ) * 60"
((60 / 11) âˆ’ 5) Ã— 60 = 300/11 = 27 + 3/11 â‰ˆ 27.27272727

delta_time = "01:05:27.27"

Dumb check:

linux> bc <<< "11 * 3927.2727"
43199.9997
linux> units -t "43199.997 s" hms
11;59;59.997


Call the first 2 posts of the fence:

P[T] and P[T+1]
Let
P[T] = k
P[T+1] = k + "01:05:27.27"

I tried direct arithmetic with linux date and $delta_time but failed
Hard-code:

linux> date
Di 17 Sep 2024 04:15:22 CEST

linux> date -d "17 Sep 2024 00:00:00 + 3927.2727 seconds"
Di 17 Sep 2024 01:05:27 CEST
linux> date -d "17 Sep 2024 00:00:00 + 3927.2727 seconds" +"%e %b %Y %H:%M:%S.%N %a DoY %j Week %V"
17 Sep 2024 01:05:27.272700000 Di DoY 261 Week 38

compare with:

linux> ./clock-hands-2 0
01:05:27.273
02:10:54.545
03:16:21.818
04:21:49.091
05:27:16.364
06:32:43.636
07:38:10.909
08:43:38.182
09:49:05.455
10:54:32.727
12:00:00.000

 
-----------------------------

-->

Additive method:
Calculate the first hit in IntervaÃ© 0 hours (12 o'clock)
Then increment that with the time delta found above
List the 11 intervals

H=0
delta_theta=66.6

decimal_minutes=`units -o "%3.9f" -t " (2 $delta_theta + 60 $H) / 11 "`
start=`units -t "$H hour + $decimal_minutes minute" second`
delta_time=`units -t "(1 day / 2) / 11" second`
for i in {0..10}; do units -t "$start second + $i $delta_time second" "hour;minute;second;millisecond"; done 
0;12;6;545.45
1;17;33;818.15
2;23;1;90.85
3;28;28;363.55
4;33;55;636.25
5;39;22;908.95
6;44;50;181.65
7;50;17;454.35
8;55;44;727.05
10;1;11;999.75
11;6;39;272.45

--------------
compare with output from my program

linux> gcc -o clock-hands-2 src/clock-hands-2.c -lm
linux> ./clock-hands-2 66.6
01:17:33.818
02:23:01.091
03:28:28.364
04:33:55.636
05:39:22.909
06:44:50.182
07:50:17.455
08:55:44.727
10:01:12.000
11:06:39.273
12:12:06.545

Same if adjust the eyes to 12 o'clock = 0 o'clock
OUT
------------
